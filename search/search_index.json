{"config":{"lang":["en"],"separator":"[\\s\\-]+","pipeline":["stopWordFilter"]},"docs":[{"location":"","title":"\u2014 C++ testing made simple \u2014","text":"A simple testNested test suitesExceptionsAsserting collectionsParametrized tests <pre><code>#include &lt;cest&gt;\n\ndescribe(\"A mars rover\", []() {\n  it(\"can go forward\", []() {\n    MarsRover rover(0,0);\n\n    rover.move(Direction::Forward);\n\n    expect(rover.position.x).toBe(1);\n  });\n});\n</code></pre> <pre><code>#include &lt;cest&gt;\n\ndescribe(\"DatabaseConnector\", []() {\n  describe(\"connect()\", []() {\n    it(\"succeeds at connecting to host\", []() {\n      auto result = DatabaseConnector().connect();\n      expect(result).toEqual(Result::SUCCESS);\n    });\n  });\n\n  describe(\"disconnect()\", []() {\n    it(\"fails to disconnect if not connected\", []() {\n      auto result = DatabaseConnector().disconnect();\n      expect(result).toEqual(Result::FAILURE);\n    });\n  });\n});\n</code></pre> <pre><code>#include &lt;cest&gt;\n\ndescribe(\"Discount vouchers\", []() {\n  it(\"can only have positive discount\", []() {\n    assertRaises&lt;InvalidDiscountException&gt;() {\n      DiscountVoucher voucher(-30);\n    }\n  });\n});\n</code></pre> <pre><code>#include &lt;cest&gt;\n\ndescribe(\"Message queue\", []() {\n  it(\"can contain multiple messages\", []() {\n    std::vector&lt;string&gt; pendingData { \"&lt;header&gt;\", \"20 apples\" };\n\n    expect(pendingData).toHaveLength(2);\n    expect(pendingData).toContain(\"&lt;header&gt;);\n    expect(pendingData[1]).toMatch(Regex(\".*\\\\d+ apples\"));\n  });\n});\n</code></pre> <pre><code>#include &lt;cest&gt;\n\ndescribe(\"Hardware Version register\", []() {\n  it(\"is mirrored in two addresses in the memory map\", []() {\n    withParameter&lt;uint32_t *&gt;().\n      withValue(0x00A1000F).\n      withValue(0xFFA1000F).\n      thenDo([](uint32_t *address) {\n        uint32_t version = *address;\n        expect(version).toBe(123);\n      });\n  });\n});\n</code></pre>"},{"location":"#main-features","title":"Main features","text":""},{"location":"#single-header","title":"Single Header","text":"<p>All features are included in a single C++ header, making it easy to integrate into any project's existing pipeline. Just include <code>cest</code> in each test file to compile a self-contained and runnable test</p>"},{"location":"#bdd-inspired-api","title":"BDD inspired API","text":"<p>Using from <code>it</code> to <code>expect</code>, write your tests as you would in JavaScript, Python or Ruby. One of the main objectives of Cest is slashing the learning curve towards C++ testing. No more esoteric syntax in C++ tests!</p>"},{"location":"#feature-rich-from-the-get-go","title":"Feature rich from the get-go","text":"<p>Includes exception handling assertions, parametrized tests, pointer assertions, integration with STL collections, and more. Want more? Planned features include parametric tests, extended collection support, async support, and more</p>"},{"location":"#contribute-to-cest-framework","title":"Contribute to Cest Framework","text":"<p>Do you like Cest Framework? Are you planning on using it on your C or C++ projects?</p> <p>If you enjoy it, it would be great to have your Star in the GitHub repository!</p> <p>Are you missing any feature? Open an issue and let's start the conversation to get it implemented.</p> <p>Do you feel like contributing? Check the contribution guide in the GitHub repository README file, and contribute to Cest. These are the current contributors of Cest, click on their avatars to go to their GitHub profiles:</p> <p> </p>"},{"location":"quickstart/","title":"Quickstart","text":""},{"location":"quickstart/#writing-your-first-test","title":"Writing your first test","text":""},{"location":"quickstart/#running-the-test","title":"Running the test","text":""},{"location":"quickstart/#basic-setup-with-cmake-and-c","title":"Basic setup with CMake and C++","text":""},{"location":"quickstart/#setting-up-cest-to-work-with-c-code","title":"Setting-up Cest to work with C code","text":""},{"location":"quickstart/#integrating-into-the-ci-pipeline","title":"Integrating into the CI pipeline","text":""},{"location":"reference/","title":"API Reference","text":""},{"location":"reference/#test-definition","title":"Test definition","text":""},{"location":"reference/#building-blocks","title":"Building blocks","text":"<p>Test suites are defined by the <code>describe</code> block. Each <code>describe</code> block takes one lambda function as the main test body, and can have many <code>it</code> blocks. All the <code>it</code> blocks will be executed when running the test.</p> <p>Warning</p> <p>Due to how <code>describe</code> blocks are built in compilation-time, Cest does not support having multiple <code>describe</code> blocks in a single file, be it independently or nested.</p> <p>Execution can be controlled using the <code>xit</code> and <code>fit</code> keywords:</p> <ul> <li><code>xit</code> will skip the test.</li> <li><code>fit</code> will execute only that specific test.</li> </ul> <p>This can be useful if you want to avoid running a test that is not yet ready, or you want to focus in fixing a single test.</p> <p>Basic test definition</p> <pre><code>describe(\"each test suite\", []() {\n  it(\"may contain\", []() {});\n\n  it(\"multiple test cases\", []() {});\n\n  fit(\"only this test will run\", []() {});\n\n  xit(\"this test will be skipped\", []() {});\n});\n</code></pre>"},{"location":"reference/#pre-conditions-and-post-conditions","title":"Pre-conditions and post-conditions","text":"<p>Execution of test cases and suites can be wrapped to control setup and teardown using the <code>beforeEach</code>, <code>afterEach</code>, <code>beforeAll</code> and <code>afterAll</code> keywords. Order of execution of the setup and teardown keywords is <code>beforeAll</code> \u2192 <code>beforeEach</code> \u2192 test case \u2192 <code>afterEach</code> \u2192 <code>afterAll</code>.</p> <p>Warning</p> <p>Even though having multiple pre-condition or post-condition keywords in a single test suite will compile, the actual functions that will be used by Cest is not guaranteed in that case. To avoid problems, each test suite must contain only one of each.</p> <p>Using setup and teardown keywords is the best way to gracefully control post and pre-conditions in your test suites and cases.</p> <p>Wrapping each test case</p> <pre><code>int *data = nullptr;\n\ndescribe(\"Behavior of pre and post conditions\", []() {\n  beforeEach([]() {\n    data = new int;\n    *data = 0;\n  });\n\n  afterEach([]() {\n    delete data;\n  });\n\n  it(\"has no memory leaks\", []() {\n    expect(*data).toEqual(0);\n  });\n});\n</code></pre> <p>Wrapping each test suite</p> <pre><code>DatabaseConnection connection;\n\ndescribe(\"Behavior of pre and post conditions\", []() {\n  beforeAll([]() {\n    connection.connectTo(\"localhost\");\n  });\n\n  afterAll([]() {\n    connection.close();\n  });\n\n  it(\"can perform queries\", []() {\n    expect(connection.getById(\"\")).toBeNull();\n  });\n});\n</code></pre>"},{"location":"reference/#assertions","title":"Assertions","text":"<p>Cest uses matchers to assert values in tests. Assertion keywords are generated through templates, ranging from common assertions to specialization to specific types (like strings, lists, etc...).</p> <p>An assertion failing to validate its value will stop the test, showing the error through the output. Remaining tests will continue to run.</p> <p>The basic form of any assertion is:</p> <pre><code>expect&lt;T&gt;(value).[assertion](...);\n</code></pre> <p>Where assertion can be comparing it to another value, validating its NULL, validating its empty... For example:</p> <pre><code>expect(\"hello\").toEqual(\"bye\"); // This will fail, as hello does not match bye\nexpect(0x00000000).toBeNull(); // This will pass, as NULL equals zero\n</code></pre> <p>Warning</p> <p>Since assertions are generated through templates, asserted type <code>T</code> must implement specific operators to match them to the target value. Basic (built-in) types implement them, but if using custom types (like classes or structures), the operators will have to be manually overloaded.</p>"},{"location":"reference/#generic-types","title":"Generic types","text":"<p>These assertions apply to a <code>value</code> of any type <code>T</code>, including the ones Cest has a specialization for (see next sections).</p> Method Description Equivalient operator <code>toBe&lt;T&gt;(T expected)</code> Passes if <code>value</code> matches <code>expected</code>, evaluated through expression <code>(value == expected)</code> <code>operator==</code> <code>toEqual&lt;T&gt;(T expected)</code> An alias to <code>toBe</code>, kept for styling purposes. Both are interchangeable <code>operator==</code> <code>toBeTruthy()</code> Passes if <code>value</code> equals true, evaluated through expression <code>(value)</code> <code>operator==</code> <code>toBeFalsy()</code> Passes if <code>value</code> equals false, evaluated through expression <code>(!value)</code> <code>operator==</code>"},{"location":"reference/#floating-point-types","title":"Floating point types","text":"<p>These assertions apply to a <code>value</code> of any type <code>T</code> inheriting from <code>float</code> or <code>double</code>. All assertions which apply to any type <code>T</code> also apply to this type.</p> Method Description <code>toBe&lt;T&gt;(T expected, T epsilon)</code> Passes if the absolute distance between <code>value</code> and <code>expected</code> is less than the specified epsilon (\u03b5), evaluated through expression <code>fabs(actual - expected) &gt; epsilon</code>. Default epsilon (\u03b5) is \u03b5=10\u207b\u2074 for 32 bit float values, and \u03b5=10\u207b\u2076 for 64 bit float values <code>toEqual&lt;T&gt;(T expected, T epsilon)</code> An alias to <code>toBe</code>, kept for styling purposes. Both are interchangeable"},{"location":"reference/#strings","title":"Strings","text":"<p>These assertions apply to a <code>value</code> of any type based on <code>std::string</code>. All assertions which apply to any type <code>T</code> also apply to this type.</p> Method Description <code>toMatch(std::string expected)</code> Passes if string <code>value</code> contains substring <code>expected</code> <code>toMatch(Regex(x))</code> Passes if string <code>value</code> matches with regular expression defined in Regex macro. See example below. <code>toHaveLength(size_t length)</code> Passes if string <code>value</code> lexicographical length equals <code>length</code>"},{"location":"reference/#using-regular-expressions-for-string-matchers","title":"Using regular expressions for string matchers","text":"<p>Regular expression matchers accept any regular expression accepted by <code>std::regex</code>. The following examples are valid regular expression assertions:</p> <pre><code>it(\"asserts regexs matches\", []() {\n  expect(\"Hello world cest\").toMatch(Regex(\"^Hell.*cest$\"));\n  expect(\"I have 12 apples\").toMatch(Regex(\".*\\\\d+ apples\"));\n  expect(\"To match a partial match\").toMatch(Regex(\"\\\\w match$\"));\n});\n</code></pre>"},{"location":"reference/#collections","title":"Collections","text":"<p>Cest supports creating assertions for standard library collections. In the current version, <code>vector</code> is supported.</p>"},{"location":"reference/#stdvector","title":"<code>std::vector</code>","text":"<p>These assertions apply to a vector <code>value</code> of any type based on <code>std::vector&lt;T&gt;</code>. All assertions which apply to any type <code>T</code> also apply to this type.</p> <p>Warning</p> <p>To be able to perform assertions on objects of type <code>std::vector&lt;T&gt;</code>, template type <code>T</code> must support comparation through the operator <code>operator==</code>.</p> Method Description <code>toEqual(std::vector&lt;T&gt; expected)</code> Passes if vector <code>value</code> contains the same number of items as <code>expected</code>, and all items contained in both vectors are equal and are at the same position <code>toContain(T item)</code> Passes if vector <code>value</code> contains an instance of <code>item</code> <code>toHaveLength(size_t length)</code> Passes if vector <code>value</code> number of items equals <code>length</code>"},{"location":"reference/#pointers","title":"Pointers","text":"<p>These assertions apply to a <code>value</code> of any pointer type <code>T*</code>.</p> Method Description <code>toEqualMemory(T *expected, size_t length)</code> Passes if <code>value</code> matches byte by byte compared wit <code>expected</code>, from address <code>expected</code> until <code>expected + length</code> <code>toBeNull()</code> Passes if <code>value</code> equals address <code>0x0</code> <code>toBeNotNull()</code> Passes if <code>value</code> does not equal address <code>0x0</code>"},{"location":"reference/#exceptions","title":"Exceptions","text":"<p>Cest supports asserting whether the result of an arbitrary expression raises a C++ exception based on type <code>std::exception</code>. The interface must be executed inside an <code>it</code> block, and accepts a lambda function (the asserted expression).</p> <p>See the following example:</p> <pre><code>void readFile(std::string path) {\n  if (path == \"\") {\n    throw std::exception(\"Bad path!\");\n  }\n}\n\ndescribe(\"File reader\", []() {\n  it(\"fails to read files with empty path\", []() {\n    std::string path = \"\";\n\n    assertThrows&lt;std::exception&gt;([=]() {\n      readFile(path);\n    });\n  });\n});\n</code></pre>"},{"location":"reference/#adding-custom-assertions","title":"Adding custom assertions","text":"<p>To add custom assertions, the following methods must be implemented as template specializations of the built-in <code>expectFunction</code> and <code>Assertion</code> classes. You can find a full example in the GitHub repository, or follow this structure to get quick-started:</p> <pre><code>#include &lt;cest&gt;\n\ntemplate&lt;&gt;\nclass Assertion&lt;MyType&gt; {\npublic:\n  Assertion(const char *file, int line, MyType value) {\n    actual = value;\n    assertion_file = std::string(file);\n    assertion_line = line;\n  }\n\n  toBeWhatever(MyType other) {\n    if (other.foo() != actual.bar()) {\n      throw AssertionError(assertion_file, assertion_line, \"The failure message\")\n    }\n  }\n\nprivate:\n  MyType actual;\n  std::string assertion_file;\n  int assertion_line;\n};\n\ntemplate&lt;&gt;\nAssertion&lt;MyType&gt; expectFunction(const char *file, int line, MyType actual) {\n  return Assertion&lt;MyType&gt;(file, line, actual);\n}\n\ndescribe(\"Custom assertions\", []() {\n  it(\"overrides for MyType\", []() {\n    MyType a, b;\n    expect(a).toBeWhatever(b);\n  });\n});\n</code></pre>"},{"location":"reference/#parametrized-tests","title":"Parametrized tests","text":"<p>Cest supports parametrizing test execution. Given a defined set of values, a parametrized test will run once for each of the values in the set. The value is passed to the test as a function argument.</p> <p>This pattern is useful when building tests where the same behaviour has to be validated against a defined set of data (for example, when working with enumerated values or ranged sets).</p> <p>See the following example to see how to define a parametrized test, which validates summing two integers and validating its result:</p> <pre><code>struct OperandsAndResult {\n  int first;\n  int second;\n  int result;\n}\n\ndescribe(\"Calculator\", []() {\n  it(\"can add numbers\", []() {\n    withParameter&lt;OperandsAndResult&gt;()\n      .withValue(OperandsAndResult(1, 1, 2))\n      .withValue(OperandsAndResult(2, 3, 5))\n      .thenDo([](OperandsAndResult x) {\n        int sum = x.first + x.second;\n        expect(sum).toEqual(x.result);\n      });\n  });\n});\n</code></pre>"},{"location":"reference/#cest-runner-cli-parameters","title":"Cest runner CLI parameters","text":"<p>Cest tests are stand-alone executables which have to be compiled and run individually. Execution behavior can be modified through command line options.</p> Option Description <code>-r</code>/<code>--randomize</code> Randomize test execution inside a single suite. Randomization uses <code>std::default_random_engine</code> <code>-s [seed]</code>/<code>--seed [seed]</code> Inject seed for randomization (should be an unsigned integer value) <code>-o</code> / <code>--only-suite-result</code> Only output the result of the whole test suite as a single line <code>-t</code> / <code>--tree-suite-result</code> Output the result of the test suite in tree format, with indents for each nested suite"},{"location":"reference/#signal-behavior","title":"Signal behavior","text":"<p>The Cest runner captures the following POSIX signals upon startup: <code>SIGSEGV</code>, <code>SIGFPE</code>, <code>SIGBUS</code>, <code>SIGILL</code>, <code>SIGTERM</code>, <code>SIGXCPU</code> and <code>SIGXFSZ</code>. Test are marked as failed if any of them raises during its execution. The POSIX function <code>signal()</code> is used for this purpose. Take this into account when testing code that captures signals, as both could interfer.</p>"}]}