{"config":{"indexing":"full","lang":["en"],"min_search_length":3,"prebuild_index":false,"separator":"[\\s\\-]+"},"docs":[{"location":"","text":"\u2014 Cest is a C++ testing framework focused on simplicity and readability \u2014 A simple test Working with exceptions Advanced collection features Parametrized tests #include <cest> describe ( \"A mars rover\" , []() { it ( \"can go forward\" , []() { MarsRover rover ( 0 , 0 ); rover . move ( Direction :: Forward ); expect ( rover . position . x ). toBe ( 1 ); }); }); #include <cest> describe ( \"Discount vouchers\" , []() { it ( \"can only have positive discount\" , []() { assertRaises < InvalidDiscountException > () { DiscountVoucher voucher ( -30 ); } }); }); #include <cest> describe ( \"Message queue\" , []() { it ( \"can contain multiple messages\" , []() { std :: vector < string > pendingData { \"<header>\" , \"20 apples\" }; expect ( pendingData ). toHaveLength ( 2 ); expect ( pendingData ). toContain ( \"<header>); expect ( pendingData [ 1 ]). toMatch ( Regex ( \".* \\\\ d+ apples\" )); }); }); #include <cest> describe ( \"Hardware Version register\" , []() { it ( \"is mirrored in two addresses in the memory map\" , []() { withParameter < uint32_t *> (). withValue ( 0x00A1000F ). withValue ( 0xFFA1000F ). thenDo ([]( uint32_t * address ) { uint32_t version = * address ; expect ( version ). toBe ( 123 ); }); }); }); Main features Single Header All features are included in a single C++ header, making it easy to integrate into any project's existing pipeline. Just include cest in each test file to compile a self-contained and runnable test BDD inspired API Using from it to expect , write your tests as you would in JavaScript, Python or Ruby. One of the main objectives of Cest is slashing the learning curve towards C++ testing. No more esoteric syntax in C++ tests! Feature rich from the get-go Includes exception handling assertions, parametrized tests, pointer assertions, integration with STL collections, and more. Want more? Planned features include parametric tests, extended collection support, async support, and more Why yet another testing framework? asd","title":"Home"},{"location":"#cest-is-a-c-testing-framework-focused-on-simplicity-and-readability","text":"A simple test Working with exceptions Advanced collection features Parametrized tests #include <cest> describe ( \"A mars rover\" , []() { it ( \"can go forward\" , []() { MarsRover rover ( 0 , 0 ); rover . move ( Direction :: Forward ); expect ( rover . position . x ). toBe ( 1 ); }); }); #include <cest> describe ( \"Discount vouchers\" , []() { it ( \"can only have positive discount\" , []() { assertRaises < InvalidDiscountException > () { DiscountVoucher voucher ( -30 ); } }); }); #include <cest> describe ( \"Message queue\" , []() { it ( \"can contain multiple messages\" , []() { std :: vector < string > pendingData { \"<header>\" , \"20 apples\" }; expect ( pendingData ). toHaveLength ( 2 ); expect ( pendingData ). toContain ( \"<header>); expect ( pendingData [ 1 ]). toMatch ( Regex ( \".* \\\\ d+ apples\" )); }); }); #include <cest> describe ( \"Hardware Version register\" , []() { it ( \"is mirrored in two addresses in the memory map\" , []() { withParameter < uint32_t *> (). withValue ( 0x00A1000F ). withValue ( 0xFFA1000F ). thenDo ([]( uint32_t * address ) { uint32_t version = * address ; expect ( version ). toBe ( 123 ); }); }); });","title":"\u2014 Cest is a C++ testing framework focused on simplicity and readability \u2014"},{"location":"#main-features","text":"","title":"Main features"},{"location":"#single-header","text":"All features are included in a single C++ header, making it easy to integrate into any project's existing pipeline. Just include cest in each test file to compile a self-contained and runnable test","title":" Single Header"},{"location":"#bdd-inspired-api","text":"Using from it to expect , write your tests as you would in JavaScript, Python or Ruby. One of the main objectives of Cest is slashing the learning curve towards C++ testing. No more esoteric syntax in C++ tests!","title":" BDD inspired API"},{"location":"#feature-rich-from-the-get-go","text":"Includes exception handling assertions, parametrized tests, pointer assertions, integration with STL collections, and more. Want more? Planned features include parametric tests, extended collection support, async support, and more","title":" Feature rich from the get-go"},{"location":"#why-yet-another-testing-framework","text":"asd","title":"Why yet another testing framework?"},{"location":"quickstart/","text":"Quickstart Basic setup with CMake and C++ Setting-up Cest to work with C code Writing your first test Running the test Integrating into the CI pipeline","title":"Quickstart"},{"location":"quickstart/#quickstart","text":"","title":"Quickstart"},{"location":"quickstart/#basic-setup-with-cmake-and-c","text":"","title":"Basic setup with CMake and C++"},{"location":"quickstart/#setting-up-cest-to-work-with-c-code","text":"","title":"Setting-up Cest to work with C code"},{"location":"quickstart/#writing-your-first-test","text":"","title":"Writing your first test"},{"location":"quickstart/#running-the-test","text":"","title":"Running the test"},{"location":"quickstart/#integrating-into-the-ci-pipeline","text":"","title":"Integrating into the CI pipeline"},{"location":"reference/","text":"API Reference Test definition Building blocks Basic test definition describe ( \"each test suite\" , []() { it ( \"may contain\" , []() {}); it ( \"multiple test cases\" , []() {}); }); Pre-conditions and post-conditions Wrapping each test case int * data = nullptr ; describe ( \"Behavior of pre and post conditions\" , []() { beforeEach ([]() { data = new int ; * data = 0 ; }); afterEach ([]() { delete data ; }); it ( \"has no memory leaks\" , []() { expect ( * data ). toEqual ( 0 ); }); }); Assertions Basic types Strings Collections Pointers Exceptions Parametrized tests Extending the assertions Cest runner CLI parameters Signal behavior","title":"API Reference"},{"location":"reference/#api-reference","text":"","title":"API Reference"},{"location":"reference/#test-definition","text":"","title":"Test definition"},{"location":"reference/#building-blocks","text":"Basic test definition describe ( \"each test suite\" , []() { it ( \"may contain\" , []() {}); it ( \"multiple test cases\" , []() {}); });","title":"Building blocks"},{"location":"reference/#pre-conditions-and-post-conditions","text":"Wrapping each test case int * data = nullptr ; describe ( \"Behavior of pre and post conditions\" , []() { beforeEach ([]() { data = new int ; * data = 0 ; }); afterEach ([]() { delete data ; }); it ( \"has no memory leaks\" , []() { expect ( * data ). toEqual ( 0 ); }); });","title":"Pre-conditions and post-conditions"},{"location":"reference/#assertions","text":"","title":"Assertions"},{"location":"reference/#basic-types","text":"","title":"Basic types"},{"location":"reference/#strings","text":"","title":"Strings"},{"location":"reference/#collections","text":"","title":"Collections"},{"location":"reference/#pointers","text":"","title":"Pointers"},{"location":"reference/#exceptions","text":"","title":"Exceptions"},{"location":"reference/#parametrized-tests","text":"","title":"Parametrized tests"},{"location":"reference/#extending-the-assertions","text":"","title":"Extending the assertions"},{"location":"reference/#cest-runner-cli-parameters","text":"","title":"Cest runner CLI parameters"},{"location":"reference/#signal-behavior","text":"","title":"Signal behavior"}]}